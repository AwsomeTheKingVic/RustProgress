Binding and mutability
=================A variable can be used only if it has been initialized============================================
// Fix the error below with least amount of modification to the code

1.1
fn main() {

    let x: i32; // Uninitialized but used, ERROR !

    let y: i32; // Uninitialized but also unused, only a Warning !

    assert_eq!(x, 5);

    println!("Success!");

}

---------------------------------------------------------------------
// Fix this first problem by getting x initialized the reason it would cause an error is because assert_eq!(); is checking if x is equal to the number given and if its not it will send out a error and also because x is being used but not given a number to be initialized

1.2
fn main() {

    let x: i32 = 5; // Uninitialized but used, ERROR !

    let y: i32; // Uninitialized but also unused, only a Warning !

    assert_eq!(x, 5);

    println!("Success!");

}

----------------------------------------------------------------------
//you fix the warning by adding a _ infront of the y

1.3
fn main() {

    let x: i32 = 5; // Uninitialized but used, ERROR !

    let _y: i32; // Uninitialized but also unused, only a Warning !

    assert_eq!(x, 5);

    println!("Success!");

}

--------------------------------------------------------------------
//completed code

1.4
fn main() {

    let x: i32 = 5; // Uninitialized but used, ERROR !

    let _y: i32; // Uninitialized but also unused, only a Warning !

    assert_eq!(x, 5);

    println!("Success!");

}

Binding and mutability
===========================Use mut to mark a variable as mutable.===============================================
// Fill the blanks in the code to make it compile

2.1
fn main() {

    let __ __ = 1;

    __ += 2; 
    
    assert_eq!(x, 3);

    println!("Success!");

}

-------------------------------------------------------------
//first we need to fill in for x

2.2
fn main() {

    let __ x = 1;

    __ += 2; 
    
    assert_eq!(x, 3);

    println!("Success!");

}

--------------------------------------------------------------------------
//since we are changing the varible we need to let it know it can be changed

2.3
fn main() {

    let mut x = 1;

    __ += 2; 
    
    assert_eq!(x, 3);

    println!("Success!");

}

-----------------------------------------------------------------------------------
//now that the varible knows it can be changed we can then do the math below it by
adding the x

2.4
fn main() {

    let mut x = 1;

    x += 2; 
    
    assert_eq!(x, 3);

    println!("Success!");

}

------------------------------------------------------------------------------
//if you would like you can add a clearification to what varible is being used

2.5
fn main() {

    let mut x: i32 = 1;

    x += 2; 
    
    assert_eq!(x, 3);

    println!("Success!");

}

-----------------------------------------------------------------------------
//completed code

2.6
fn main() {

    let mut x: i32 = 1;

    x += 2; 
    
    assert_eq!(x, 3);

    println!("Success!");

}

Scope
==========================A scope is the range within the program for which the item is valid.==========================================================
// Fix the error below with least amount of modification

3.1
fn main() {

    let x: i32 = 10;

    {

        let y: i32 = 5;

        println!("The value of x is {} and value of y is {}", x, y);

    }

    println!("The value of x is {} and value of y is {}", x, y); 

}

----------------------------------------------------------------------------------
// as you can see the {} seperate the code in the middle meaning it will run like normal but any variables inside it can not be used outside of it so in order to make this work we would need to move out ley y: i32 = 10; outside the scope allowing it to be used

3.2
fn main() {

    let x: i32 = 10;
    let y: i32 = 5;

    {

        println!("The value of x is {} and value of y is {}", x, y);

    }

    println!("The value of x is {} and value of y is {}", x, y); 

}

-----------------------------------------------------------------------------------
//completed code

3.3
fn main() {

    let x: i32 = 10;
    let y: i32 = 5;

    {

        println!("The value of x is {} and value of y is {}", x, y);

    }

    println!("The value of x is {} and value of y is {}", x, y); 

}

Scope
=====================A scope is the range within the program for which the item is valid.========================================================
// Fix the error with the use of define_x

4.1
fn main() {

    println!("{}, world", x); 

}

fn define_x() {

    let x = "hello";

}

--------------------------------------------------------------------------------------------
//since in main we can not find x we must move it inside out function define_x()

4.2
fn main() {
     
}

fn define_x() {

    let x = "hello";

    println!("{}, world", x);

}

----------------------------------------------------------------------------------
// now we must call the function in the main function

4.3
fn main() {
     
    define_x();

}

fn define_x() {

    let x = "hello";

    println!("{}, world", x);

}

------------------------------------------------------------------------------------
//completed code

4.4
fn main() {
     
    define_x();

}

fn define_x() {

    let x = "hello";

    println!("{}, world", x);

}

Shadowing
======================You can declare a new variable with the same name as a previous variable, here we can say the first one is shadowed by the second one.=======================================================
// Only modify `assert_eq!` to make the `println!` work(print `42` in terminal)

5.1
fn main() {

    let x: i32 = 5;

    {

        let x = 12;

        assert_eq!(x, 5);

    }

    assert_eq!(x, 12);

    let x = 42;

    println!("{}", x); // Prints "42".

}

--------------------------------------------------------------------------------------------
//first we wull sloce the first two issues the main scope and sub scope in this case the inner scope does not worry about anything outside of it so we will need to change the inner assert_eq!(); to match the x inside the scope and by that we must change the main scope and main as in the first scope no main as in the function lets now change assert_eq!(); of the main scope to match the x variable

5.2
fn main() {

    let x: i32 = 5;

    {

        let x = 12;

        assert_eq!(x, 12);

    }

    assert_eq!(x, 5);

    let x = 42;

    println!("{}", x); // Prints "42".

}

------------------------------------------------------------------------------------------
//now that we solved those two small issues to get the printed result that we are looking for the upcomming x variable would in this case be shadowing out first x varible so we are reinitalizing x so make sure to keep it consitant by adding the variable type i32

5.3
fn main() {

    let x: i32 = 5;

    {

        let x = 12;

        assert_eq!(x, 12);

    }

    assert_eq!(x, 5);

    let x: i32 = 42;

    println!("{}", x); // Prints "42".

}

--------------------------------------------------------------------------------------------
//completed code

5.4
fn main() {

    let x: i32 = 5;

    {

        let x = 12;

        assert_eq!(x, 12);

    }

    assert_eq!(x, 5);

    let x: i32 = 42;

    println!("{}", x); // Prints "42".

}


Shadowing
====================You can declare a new variable with the same name as a previous variable=======================================================================
// Remove a line in the code to make it compile

6.1
fn main() {

    let mut x: i32 = 1;

    x = 7;

    // Shadowing and re-binding

    let x = x; 

    x += 3;


    let y = 4;

    // Shadowing

    let y = "I can also be bound to text!"; 

    println!("Success!");

}

--------------------------------------------------------------------------------------------------------------
//for the first part we are redeclaring x but not telling the system that it is mutable well meaning it can change so
//after finding where x is being declared but now being told its mut then lets add it like as so

6.2
fn main() {

    let mut x: i32 = 1;

    x = 7;

    // Shadowing and re-binding

    let mut x = x; 

    x += 3;


    let y = 4;

    // Shadowing

    let y = "I can also be bound to text!"; 

    println!("Success!");

}

------------------------------------------------------------------------------------------------------------------
//for the second part y is being used twice first for holding a integer and the second for holding a string lets give
//this information to the code

6.3
fn main() {

    let mut x: i32 = 1;

    x = 7;

    // Shadowing and re-binding

    let mut x = x; 

    x += 3;


    let y: i32 = 4;

    // Shadowing

    let y: &str = "I can also be bound to text!"; 

    println!("Success!");

}

------------------------------------------------------------------------------------------------------------------
//now the code will compile and run but you will notice that that x is basically initilizing its self by x calling x
//this would be the one we remove

6.4
fn main() {

    let mut x: i32 = 1;

    x = 7;

    // Shadowing and re-binding

    x += 3;


    let y: i32 = 4;

    // Shadowing

    let y: &str = "I can also be bound to text!"; 

    println!("Success!");

}

-------------------------------------------------------------------------------------------------------------------
//completed code

6.5
fn main() {

    let mut x: i32 = 1;

    x = 7;

    // Shadowing and re-binding

    x += 3;


    let y: i32 = 4;

    // Shadowing

    let y: &str = "I can also be bound to text!"; 

    println!("Success!");

}

Unused variables
=========================================Two distinct solutions========================================================================
//solve the problem with two disticn solutions

7.1
fn main() {

    let x = 1; 

}

// Warning: unused variable: `x`

--------------------------------------------------------------------------------------------------
// one way is to add a _ infornt of the x

7.2
fn main() {

    let _x = 1; 

}

// Warning: unused variable: `x`

----------------------------------------------------------------------------------------------
//second way is to add #[allow(unused_variables)] which is not the best way

7.3
#[allow(unused_variables)]
fn main() {

    let x = 1; 

}

// Warning: unused variable: `x`

--------------------------------------------------------------------------------------------
//completed code

7.4
fn main() {

    let _x = 1; 

}

or

#[allow(unused_variables)]
fn main() {

    let x = 1; 

}

Destructuring
============================ We can use a pattern with let to destructure a tuple to separate variables================================================================================
// Fix the error below with least amount of modification

8.1
fn main() {

    let (x, y) = (1, 2);

    x += 2;

    assert_eq!(x, 3);

    assert_eq!(y, 2);

    println!("Success!");

}

-----------------------------------------------------------------------------------------------------------------
// the tuple is like an array of information but in this case we need x to equal 3 and since its changing we have to
//make it mutable

8.2
fn main() {

    let (mut x, y) = (1, 2);

    x += 2;

    assert_eq!(x, 3);

    assert_eq!(y, 2);

    println!("Success!");

}

---------------------------------------------------------------------------------------------------------------
//completed code

8.3
fn main() {

    let (mut x, y) = (1, 2);

    x += 2;

    assert_eq!(x, 3);

    assert_eq!(y, 2);

    println!("Success!");

}

Destructuring assignments
==================================You can now use tuple, slice, and struct patterns as the left-hand side of an assignment.=============================================================================
//this allows to declare two variables that then can be assigned like below

8.1
fn main() {

    let (x, y);

    (x,..) = (3, 4);

    [.., y] = [1, 2];

    // Fill the blank to make the code work
    assert_eq!([x,y], __);

    println!("Success!");

} 

--------------------------------------------------------------------------------------------------------------
//we declared the two variables and then you can give them values like the two variations below it when you dont want to
//give a variable a value you can enter .. otherwise you can enter the varible in this case x will be equal to 3 and y
// to 2

8.2
fn main() {

    let (x, y);

    (x,..) = (3, 4);

    [.., y] = [1, 2];

    // Fill the blank to make the code work
    assert_eq!([x,y], [3,2]);

    println!("Success!");

}

---------------------------------------------------------------------------------------------------------------
//completed code

8.3
fn main() {

    let (x, y);

    (x,..) = (3, 4);

    [.., y] = [1, 2];

    // Fill the blank to make the code work
    assert_eq!([x,y], [3,2]);

    println!("Success!");

}