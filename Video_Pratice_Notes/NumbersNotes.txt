Numbers

Integer Types
===============================================================================================================================
Singed Integer: Can represent both positive and negative integers
Unsinged Integer: Always positive integers

-------------------------------
| Length  | Signed | Unsigned |
-------------------------------
| 8-bit   | i8     | u8       |
-------------------------------
| 16-bit  | i16    | u16      |
-------------------------------
| 32-bit  | i32    | u32      |
-------------------------------
| 64-bit  | i64    | u64      |
-------------------------------
| 128-bit | i128   | u128     |
-------------------------------
| arch    | isize  | usize    |
-------------------------------

Default Types
===============================================================================================================================
Integers: i32
Floats: f64

Binary Number System
===============================================================================================================================
42

---------------
|  4   |  2   |
---------------
| 10^1 | 10^0 |
---------------

(4 * 10^1) + (2 * 10^0)
=(4 * 10) + (2 * 1)
=40 + 2 = 42

42

-------------------------------------------------
|  0  |  0  |  1  |  0  |  1  |  0  |  1  |  0  |
-------------------------------------------------
| 2^7 | 2^6 | 2^5 | 2^4 | 2^3 | 2^2 | 2^1 | 2^0 | 
-------------------------------------------------
| 128 | 64  | 32  | 16  | 8   | 4   | 2   | 1   |
-------------------------------------------------

(1 * 2^5) + (1 * 2^3) + (1 * 2^1)
= (1 * 32) + (1 * 8) + (1 * 2)
= 32 + 8 + 2 = 42

Range of 8-bit integers
===============================================================================================================================
smallest possible 8-bit integer(unsigned): 0

-------------------------------------------------
|  0  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |
-------------------------------------------------
| 2^7 | 2^6 | 2^5 | 2^4 | 2^3 | 2^2 | 2^1 | 2^0 | 
-------------------------------------------------
| 128 | 64  | 32  | 16  | 8   | 4   | 2   | 1   |
-------------------------------------------------

Largest possible 8-bit integer(unsigned): 255

-------------------------------------------------
|  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |
-------------------------------------------------
| 2^7 | 2^6 | 2^5 | 2^4 | 2^3 | 2^2 | 2^1 | 2^0 | 
-------------------------------------------------
| 128 | 64  | 32  | 16  | 8   | 4   | 2   | 1   |
-------------------------------------------------

Range of 16-bit integers
===============================================================================================================================
smallest possible 16-bit integer(unsigned): 0

---------------------------------------------------------------------------------------------------------------
|    0   |    0   |    0  |    0  |    0  |    0  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |
---------------------------------------------------------------------------------------------------------------
|  2^15  |  2^14  |  2^13 |  2^12 |  2^11 |  2^10 | 2^9 | 2^8 | 2^7 | 2^6 | 2^5 | 2^4 | 2^3 | 2^2 | 2^1 | 2^0 | 
---------------------------------------------------------------------------------------------------------------
| 32,768 | 16,384 | 8,192 | 4,096 | 2,048 | 1,024 | 512 | 256 | 128 | 64  | 32  | 16  | 8   | 4   | 2   | 1   |
---------------------------------------------------------------------------------------------------------------

Largest possible 16-bit integer(unsigned): 65,535

---------------------------------------------------------------------------------------------------------------
|   1    |    1   |   1   |   1   |   1   |   1   |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |
---------------------------------------------------------------------------------------------------------------
|  2^15  |  2^14  |  2^13 |  2^12 |  2^11 |  2^10 | 2^9 | 2^8 | 2^7 | 2^6 | 2^5 | 2^4 | 2^3 | 2^2 | 2^1 | 2^0 | 
---------------------------------------------------------------------------------------------------------------
| 32,768 | 16,384 | 8,192 | 4,096 | 2,048 | 1,024 | 512 | 256 | 128 | 64  | 32  | 16  | 8   | 4   | 2   | 1   |
---------------------------------------------------------------------------------------------------------------

Signed Integers
===============================================================================================================================
Two's complement
42

-------------------------------------------------
|  0  |  0  |  1  |  0  |  1  |  0  |  1  |  0  |
-------------------------------------------------
Swap
-------------------------------------------------
|  1  |  1  |  0  |  1  |  0  |  1  |  0  |  1  |
-------------------------------------------------
					+1
-------------------------------------------------
|  1  |  1  |  0  |  1  |  0  |  1  |  1  |  0  |
-------------------------------------------------

if last bit is 0 then positive 1 then negative

= -42

Integer Ranges
===============================================================================================================================
Data Type	Min														Max
i8			-128													127
i16			-32,768													32,767
i32			-2,147,483,648											2,147,483,647
i64			-9,223,372,036,854,775,808								9,223,372,036,854,775,807
i128		-170,141,183,460,469,231,731,687,303,715,884,105,728	170,141,183,460,469,231,731,687,303,715,884,105,727

u8			0														255
u16			0														65,535
u32			0														4,294,967,295
u64			0														18,446,744,073,709,551,615
u128		0														340,282,366,920,938,463,463,374,607,431,768,211,455

usize & isize
===============================================================================================================================
Architecture dependent
on 32-bit architecture: 32-bit
on 64-bit architecture: 64-bit
pointer sized integer type, matches size of a word in given platform

What is a word
===============================================================================================================================
Processor does not read 1 byte at a time from memory reads 1 word at a time
in a 32-bit processor it can access 4 bytes(32 bits) at a time
in a 64-bit processor it can access 8 bytes(64 bits) at a time

in a 32-bit architecture the size of a word is a 4 bytes which means that the processor can access 4 bytes at a time

usize gives you the guarantee to be always big enough to hold any pointer or any offset in a data structure


--------------------------
| Address  | Data(1 byte)|
-----------------------------
| 0x0001   | 0000 0001   |  |
--------------------------  |
| 0x0002   | 0000 0010   |  |
--------------------------  | 4 bytes in a 32-bit architecture
| 0x0003   | 0000 0011   |  |
--------------------------  |
| 0x0004   | 0000 0100   |  |
-----------------------------
| 0x0005   | 0000 0101   |
--------------------------
| 0x0006   | 0000 0111   |
--------------------------
| 0x0007   | 0000 1000   |
--------------------------
| 0x0008   | 0000 1001   |
--------------------------
| 0x0009   | 0000 1010   |
--------------------------

Floating Point
===============================================================================================================================
f32 - size of 32 bits
f64 - size of 64 bits

representation according to IEEE-754 specification

Boolean Logic
===============================================================================================================================
Boolean logic deals with values that are either "true" or "false"(or 1 and 0)

three basic operations: AND, OR, NOT

--------------------------			--------------------------			-------------------
|	Truth Table AND      |			|	Truth Table OR       |			|	    NOT       |
--------------------------			--------------------------			-------------------
| False  | False | FALSE |			| False  | False | FALSE |			| !False  | TRUE  |
--------------------------			--------------------------			-------------------
| False  | True  | FALSE |			| False  | True  | TRUE  |			| !True   | FALSE |
--------------------------			--------------------------			-------------------
| True   | False | FALSE |			| True   | False | TRUE  |
--------------------------			--------------------------
| True   | True  | TRUE  |			| True   | True  | TRUE  |
--------------------------			--------------------------

Bitwise Operation
===============================================================================================================================
Operation that manipulate individual bits that make up a binary number
Treating each bit of a binary number as a separate unit and perform logical operations on them
AND, OR, XOR, bitwise shifting

AND(&)
===============================================================================================================================
A ---|
	 |==== Q
B ---|

AND returns 1 only when both of its inputs are 1

----------------
|  Truth Table |
----------------
| A  |  B  | Q |
----------------
| 0  |  0  | 0 |
----------------
| 0  |  1  | 0 |
----------------
| 1  |  0  | 0 |
----------------
| 1  |  1  | 1 |
----------------

OR(|)
===============================================================================================================================
A ---|
	 |==== Q
B ---|

OR returns 1 if at least one of its inputs is 1 if both inputs are 0 the output will also be 0

----------------
|  Truth Table |
----------------
| A  |  B  | Q |
----------------
| 0  |  0  | 0 |
----------------
| 0  |  1  | 1 |
----------------
| 1  |  0  | 1 |
----------------
| 1  |  1  | 1 |
----------------

XOR(^)
===============================================================================================================================

A ---|
	 |==== Q
B ---|

XOR or (eXclusive OR) returns 1 if the inputs are different and 0 if the inputs are the same

----------------
|  Truth Table |
----------------
| A  |  B  | Q |
----------------
| 0  |  0  | 0 |
----------------
| 0  |  1  | 1 |
----------------
| 1  |  0  | 1 |
----------------
| 1  |  1  | 0 |
----------------

Full Adder
===============================================================================================================================
//Example Here

Bitwise Left Shift
===============================================================================================================================
1 << 5

-------------------------------------------------
|  0  |  0  |  0  |  0  |  0  |  0  |  0  |  1  |
-------------------------------------------------
			   |__5__|__4__|__3__|__2__|__1__|

-------------------------------------------------
|  0  |  0  |  1  |  0  |  0  |  0  |  0  |  0  |
-------------------------------------------------

= 32

Bitwise Right Shift
===============================================================================================================================
0x80 >> 2 = 128 >> 2

-------------------------------------------------
|  1  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |
-------------------------------------------------
   |__1__|__2__|
   
-------------------------------------------------
|  0  |  0  |  1  |  0  |  0  |  0  |  0  |  0  |
-------------------------------------------------

= 0x20 = 32


===============================================================================================================================